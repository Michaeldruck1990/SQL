-- For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL)

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL. 

--First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

--Next I explored which songs were not in the "standard" 4/4 time signature.
SELECT
artist_name, 
track_name,
time_signature
FROM BIT_DB.spotifydata
WHERE time_signature <> '4'
GROUP BY artist_name;

--I then explored the data to find which songs were not in a Major mode, and were in a Minor mode instead.
SELECT
artist_name,
track_name,
song_key,
song_mode
FROM BIT_DB.Spotifydata
WHERE song_mode = '0'
GROUP BY artist_name;

--Then I determined who the Top 10 artists are by popularity.
SELECT 
artist_name,
track_name,
popularity 
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

--Then I determined which artist released the longest song (in milliseconds).
SELECT
artist_name,
track_name,
duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1; 

--Next I determined what was the average danceability for the 10 most popular songs.
SELECT 
artist_name,
track_name,
popularity,
avg(danceability) 
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name
ORDER BY popularity desc
LIMIT 10;

--Next I investigated the data to find songs with a tempo of over 130 beats per minute.
SELECT
artist_name,
track_name,
tempo
FROM BIT_DB.spotifydata
WHERE tempo > 130
GROUP BY artist_name, track_name
ORDER BY tempo desc;

--Finally I determined which artists had the least amount of "instrumentalness" in their songs (which songs were majorally vocals).
SELECT 
artist_name,
track_name,
instrumentalness
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name
ORDER BY instrumentalness asc;
